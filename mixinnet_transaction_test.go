package mixin

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestTransactionFromRaw(t *testing.T) {
	t.Run("mint-tx", func(t *testing.T) {
		tx, err := TransactionFromRaw("77770005a99c2e0e2b1da4d648755ef19bd95139acbbe6564cfb06dec7cd34931ca72cdc0001000000000000000000000000000000000000000000000000000000000000000000000000000077770009554e4956455253414c00000000000006ab00050217b4fac0001d000000040a5b0b840001d4c5c9f325721b18a9cc1390668d9e600ac02a5e579f4a1b80ec5f468b44828f2bd38ba54e5e5688b3d29198636d4f32fe1c6e03539d57c5ca2b4fb3fd32fce30003fffe010000000000040a5b0b840001f759bc4cee92141028a2482070328a03376f571eab46011886211a922ac07f1c7459b5aaf62e07f06b70faf83271b9e71193806c085b70cc6394d8f8736618850003fffe010000000000040a7e0f9f0001fa2648e6fb3dcf63df2f405ab0e7ffea4f2461f5b8475fbc7b20600aa0c77ddac9da2c39e828836530305aaea7cf55abc736fe7454c4ad30eecb3afd19e34a4b0003fffe010000000000040a98ad8e0001eede1e23475838446c9ab0548e69d592a160c369a0e20f5336f8b1774572d7b2d7935fb1122c473f4b2ef2fb2a6add2f57128aa6484a3de51e70c61fdf5509250003fffe010000000000040aa777120001d901be6ae100dbe73a7fd61f7e55cc08149d6933c05d7cf3bc21438911125a527027942855f1fac77ca4510059ba65176d40fdcfa00218b207849d83a12d44110003fffe010000000000040a87865a00012f43276e366c8f015d53726d57484b56361f57bd077896e0856de1b8d34ad2d1a7eae45f821f1a37b763b6a9f220ea81886990159621df4ba0d075fc90a765cb0003fffe010000000000040a1eb69c0001ef54796a836622ff2943258d75f9c9cf823dfa82118201efcd0860f976df2b0f4203c5862c6284ab970d8d3e4a495a08db7dcce72c100dedfa32f91b057e7d9a0003fffe010000000000040a9f2f2e000166e1deff1f9ad104e7538d415029e3ae3e62ad5f181ea9ae915d33dc8743069687367e954ec8ecaf85c114ac9ebc5e09a5c3389ed986e9d9c766638e115eaa580003fffe0100000000000409e5ee39000133a8e56b43f6c904d2de5f81bf1e2831dc8e77e484ac14be3a79e886ca9095155538b37038c33ebaf2cf40e527b3a54df3cbf447027f6375a42ca0b31acdf3cd0003fffe010000000000040a894c9e0001c60b4c9bd17ce02f1998279d488c82238318ab75d09719afabc4788b6fbff54cb492908564f256c7f91a73e66c5f912c83f7442a4fae4e8143c59d699f1d84030003fffe010000000000040a88b53200017f11ae67195c91bc47262e45142a87561fc0d5aa3b4ee4c6fc993eabc6ff176a68dce62e4dd62fad8373bd430e26d31c81d267976871c6bc56e876314015c4980003fffe0100000000000409fec5e400018e264e2da79db6e8dd8f2efbf8184eb8b850da365f52891014765eeca159cf9dbc331b203fe06413061913141dbcd8480c5faaaf9eed202056712241470b1e790003fffe010000000000040a95b87300011ad554b8ced26fdb8a7612768d57173fe069c24b19acdc907cc9d3092f0e97753c36682a24628ee6ff34f1814b651e1c15b2f7b4528eedc9ee4aca82851561420003fffe0100000000000409b43ee2000135062ecaa7bf298d7a8071fee571dd012ba6e0b2f15e0230934a7dfdc8f48c8ac8774c1a14a36a9f5aa6687eeeadac81ede029c12f4d92fd22aafba77e22ec2e0003fffe010000000000040a5e980b00010f93ee0805bac606d2b3bacab79fd01d316913a8703832f3c2bb5cee5f217e69d0a1265616a270715cb36599f9689cf53f28cf5dfc53f48846a0ad13a58741780003fffe010000000000040a89e40900012fa69e6630f6a206edcd1eff4c0ce43932149e0660895b24eb7c1bd13492a6d31c0f4e489aea65d328cd65860a929cb18f2bba2befd43257ddb945525dc6f76f0003fffe010000000000040a8104ba00010aa74ba4903f6ea37b523889565ce2dba412c66ed3abab8929d91ceeab660c62ba270d9a66f493b278ae8806ff5960eba4b9f4ba2bf17a7cb543ee84fc74ad1e0003fffe010000000000040a87865a0001302787db5408e2a9589920bad58db0019a6e3a075cc0514d323a3cc813a0a489f40e531b4528e52da8e5ec134349c928236fc04d3079057507b07bdad519ec320003fffe010000000000040aab9b040001a5ed3b4b8dade5ae66cc4bfa03b39cb25cefc64745c5297ce16d5598ae2b622a879aaa70a6fc6bfa0b54c4e9da8854ba08db3ed0e89f3ea19c6d50888c7c9ea30003fffe010000000000040a9944f900017f53769e14aa78b6d20616ff1a9c8cbbe4c29cf488aa4c02034779461911b48b2735d0995c4c83be6df2dfe96588810f03e845e022e722eb4bd43a6a0aa1536c0003fffe010000000000040a8cd92400017331503c436374b0cfbc23f821abae3af0a05e4756fee28138e96d704197084245fef572c7861bd7079ff8e616b17eed5c379d6f043b7b75be3349afae69d4930003fffe010000000000040a295c2e00014e27e7983e766e1ac25fedb1f4532dce549a1745fd955e834c6a2da2c0af12793ea9bd89783ac5812b7f954012821bbd8a8aa6e0bd2e68dff9f0a5928dd554ae0003fffe010000000000040a1eb69c00015deb0a0d12755c099eecc54bd68749889153b5a519870a286974f2e254868983a99a6a0e7bc8b1c79e34702404c2001d6b67789bc4e5a84c4edc24bc8f9fc0f10003fffe0100000000000408150590000195cb7326e189c1ce42f77e1b9a2f000f140ea42777d851f9ca0c8203ef4351d0c600c1da5f222fbdd6e4f7784dada377b50c04ad0ce42642a8154f8f9654a5240003fffe0100000000000409ad25d60001a7318518f37c0359d1ab69f719250b2f829fb9d3a400ce9a58cb7580e689c74a1cea372fa5dc08b67f768e6714548aa03569fbdf773af3e62192efaca3a13bf00003fffe0100000000000409944e2b0001053d0c1fb060172c5212cc213f3a570193fc3b49d36d863e2d18ba0e88d42760721d05dc288fa888daa3b66efd7053e9fc5aaaff4169c162b06e9598cf76c05c0003fffe01000000000004017ecc010001b725c08ac8520a8ed9ef1ed8060b2d0d0a3bf3fbcf39b28e085201c8a41e9f5d1e8484a1526ec7346a587d70393d4d03b43e8c7399ebf167fa05e48f611ffc6c0003fffe01000000000004d648644c00011f87c5ffff16c09320041815b6b7744223e56fecf5a4a6cc4a489c914c81c078646f57088711538e0d32afd11d5aa2a3783334b2f7a4a4452ea504713ac7aeed0003fffe010000000000043592192200013bdba83bf7e971b04b82df65d43eb9ac7cb697fdc87ba107fc53822049eb27d6874ed0cd9c68b15b79d3c3f8293bfd8087dd15a8631f1643cc51973883d028ad0003fffe4000000000000000000001000100004d464006386f982921866e0a589e38107c047e97b3d379de6f77c8501cb46740a1ffa79e0de238952200dad48a7f483856587975753aec5e8fea44f6b2743a08")
		require.Nil(t, err)

		hash, err := HashFromString("eb3cd0b4cfb257e0ef5f48ca17662b3712c683113e4d46c9b4ba14663310df04")
		require.Nil(t, err)

		hash1, err := tx.TransactionHash()
		require.Nil(t, err)
		require.Equal(t, hash[:], hash1[:], "hash not matched: %v != %v", hash, hash1)
	})

	t.Run("pledge-tx", func(t *testing.T) {
		ctx := context.Background()

		tx, err := TransactionFromRaw("77770005a99c2e0e2b1da4d648755ef19bd95139acbbe6564cfb06dec7cd34931ca72cdc00016ea46b23443eb0731480b14a351962814ea0614bc9d00c2e10d82e33cf71b0100000000000000000000100a300060138e6ae9f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000954365c91f0798bc88f4ed0df2629a5979f0c27b0b396a3d9eadb907358bb69c43eb7377cfcf0c4ab2239d309b75cb25a791f8b7fdc902b4d7c57c28ef64a7ffffff010c8481a699feae9127766bd7776a0d85bdbdb33e8fe38120402fae64f2c91bea9214407fe748cec2d7b6ac75a43b15129d068b83ec729197e540438204fd140f00000101")
		require.Nil(t, err)

		hash, err := HashFromString("cb91aab70e6af785aba49482bb033bb53f0b038594712d7ba03576df025e5c32")
		require.Nil(t, err)

		hash1, err := tx.TransactionHash()
		require.Nil(t, err)
		require.Equal(t, hash[:], hash1[:], "hash not matched: %v != %v", hash, hash1)

		sourceTx, err := GetTransaction(ctx, *tx.Inputs[0].Hash)
		require.Nil(t, err)
		require.NotNil(t, sourceTx)

		output := sourceTx.Outputs[int(tx.Inputs[0].Index)]
		require.Equal(t, 1, len(output.Keys))

		require.NotNil(t, tx.AggregatedSignature)
		require.True(t, len(tx.AggregatedSignature.Signers) == 1 && tx.AggregatedSignature.Signers[0] == 0)
		require.NotNil(t, tx.AggregatedSignature.Signature)

		pubSpend, err := KeyFromString("9c43eb7377cfcf0c4ab2239d309b75cb25a791f8b7fdc902b4d7c57c28ef64a7")
		require.Nil(t, err)
		addr := NewMixinnetAddressFromPublicSpend(pubSpend)
		verified, err := VerifyTransaction(ctx, addr, hash)
		require.Nil(t, err)
		require.True(t, verified)

		ghostPub := DeriveGhostPublicKey(&addr.PrivateViewKey, &output.Mask, &addr.PublicSpendKey, 0)
		require.Equal(t, output.Keys[0][:], ghostPub[:])

		require.True(t, ghostPub.Verify(*tx.Hash, *tx.AggregatedSignature.Signature))
	})

	t.Run("normal-tx-receiver", func(t *testing.T) {
		tx, err := TransactionFromRaw("77770005a99c2e0e2b1da4d648755ef19bd95139acbbe6564cfb06dec7cd34931ca72cdc00019cb38f04a87023fa44df09d0f79d1bcabe14723b4c8cebd2536a34f99ef2e58100000000000000000001000000060138e6ae9f000001025f7f09967c18ff2b0546ecc7e819486fd59984a51a07f0b45e740a738c9112025c555435a78d370131170726e151163ae29059e2cf5361922bc9cae841181e0003fffe010000000000000000ffffff012bd927fd04a183f6bada34aa9f22dc684a71a02a8a8d0cf64d4e8933361ddc261bc053c76a3116c636205b7fdfd3d3469841a332a381b815d0d9068fe1c9e10700000101")
		require.Nil(t, err)

		require.Equal(t, 1, len(tx.Outputs))
		output := tx.Outputs[0]
		pubSpend, err := KeyFromString("921c1ca5927ca9b837a0415f7e825b1c13a4b02a4cbb98b7d26d9a171fff48b8")
		require.Nil(t, err)

		addr := NewMixinnetAddressFromPublicSpend(pubSpend)
		ghostPub := DeriveGhostPublicKey(&addr.PrivateViewKey, &output.Mask, &addr.PublicSpendKey, 0)
		require.Equal(t, output.Keys[0][:], ghostPub[:])
	})
}
